@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@mixin generate_container_up($get_key) {
  @media screen and (min-width: map.get($grid-breakpoints, $get_key)) {
    @content;
  }
}

@mixin generate_utilities($has-key: false) {
  $prefix: if($has-key, '#{$has-key}\\:', '');
  @each $property, $map in $utilities {
    @each $util-key, $util-val in map.get($map, values) {
      @if (map.get($map, isActive) == true) {
        .#{$prefix}#{$util-key} {
          #{map.get($map, property)}: $util-val;
        }
      }
    }
  }
  @for $i from 1 through $number-of-col {
    .#{$prefix}z-#{$i} {
      z-index: $i;
    }
    .#{$prefix}order-#{$i} {
      order: $i;
    }
  }

  @for $i from 0 through 4 {
    .#{$prefix}w-#{$i * 25} {
      width: generate-width($i, 4);
    }
    .#{$prefix}h-#{$i * 25} {
      height: generate-width($i, 4);
    }
  }

  .#{$prefix}h-auto {
    height: auto;
  }
  .#{$prefix}w-auto {
    width: auto;
  }
  .#{$prefix}h-screen {
    height: 100vh;
  }
  .#{$prefix}w-screen {
    width: 100vw;
  }
}

@mixin generate_cols($has-key: false) {
  $prefix: if($has-key, '#{$has-key}-', '');
  @for $i from 1 through $number-of-col {
    .col-#{$prefix}#{$i} {
      width: generate-width($i, $number-of-col);
    }
    @if $i != $number-of-col {
      .offset-#{$prefix}#{$i} {
        margin-left: generate-width($i, $number-of-col);
      }
    }
  }
}

@mixin generate_spacing($has-key: null) {
  $prefix: if($has-key, '#{$has-key}\\:', '');

  @for $i from 0 through $spacer-limit {
    .#{$prefix + 'm'}-#{$i}{
      margin: #{$i * $spacer};
    }
    .#{$prefix + 'p'}-#{$i}{
      padding: #{$i * $spacer};
    }
    @each $key, $direction in $spacing-utilities {
      .#{$prefix + 'm'}#{$key}-#{$i} {
        margin-#{$direction}: #{$i * $spacer};
      }
      .#{$prefix + 'p'}#{$key}-#{$i} {
        padding-#{$direction}: #{$i * $spacer};
      }
    }

    @each $axis in ('x', 'y') {
      .#{$prefix + 'm'}#{$axis}-#{$i} {
        @if ($has-rtl == true) {
          margin: {
            #{if($axis == 'x', 'inline-start', 'block-start')}: #{$i * $spacer};
            #{if($axis == 'x', 'inline-end', 'block-end')}: #{$i * $spacer};
          }
        } @else {
          margin: {
            #{if($axis == 'x', 'left', 'top')}: #{$i * $spacer};
            #{if($axis == 'x', 'right', 'bottom')}: #{$i * $spacer};
          }
        }
      }
    }
    .#{$prefix}gap-x-#{$i} {
      column-gap: #{$i * $spacer};
    }
    .#{$prefix}gap-y-#{$i} {
      row-gap: #{$i * $spacer};
    }
    .#{$prefix}gap-#{$i} {
      gap: #{$i * $spacer};
    }
  }
}

@mixin generate_positions($has-key: false){
  $prefix: if($has-key, '#{$has-key}\\:', '');
  @each $direction in $position-utilities{

    @for $i from 0 through $spacer-limit{
      .#{$prefix + $direction}-#{$i}{
        #{$direction}: #{$i * 4%};
      }
      @if ($has-rtl == true){
        @if ($direction == "right"){
          #{'.' + $prefix + "rtl\\:" + $direction}-#{$i}{
            #{$direction}: #{$i * 4%};
          }
          #{"[dir=rtl] ." + $prefix + "rtl\\:" + $direction}-#{$i}{
            right: unset;
            left: #{$i * 4%};
          }
        }
        @if ($direction == "left"){
          #{'.' + $prefix + "rtl\\:" + $direction}-#{$i}{
            #{$direction}: #{$i * 4%};
          }
          #{"[dir=rtl] ." + $prefix + "rtl\\:" + $direction}-#{$i}{
            left: unset;
            right: #{$i * 4%};
          }
        }
       
      }
    }
  }
}

@mixin generate_font_size($has-key: false) {
  $prefix: if($has-key, '#{$has-key}\\:', '');
  @for $i from 0 through $spacer-limit {
    .#{$prefix}text-#{$i} {
      font-size: #{$i * $spacer};
    }
  }
}

@mixin generate_opacity($has-key: false) {
  $prefix: if($has-key, '#{$has-key}\\:', '');
  @for $i from 0 through 100 {
    @if $i % 10 == 0 {
      .#{$prefix}opacity-#{$i} {
        opacity: math.div($i, 100);
      }
    }
  }
}
