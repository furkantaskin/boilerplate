@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use 'sass:meta';

@mixin generate_spacing_range(
  $limit: $spacer-limit,
  $spacing: $spacer
) {
  @for $i from($limit * $spacing * -1) through ($limit * $spacing) {
    $unit: math.unit($spacer);
    $i: strip-unit($i);
    $spacing: strip-unit($spacing);
    @if ($i % 2 == 0) {
      //Get quotient
      $quotient: math.abs(math.div($i, $spacing));

      // Split quotient to detect if it has decimal or not
      $get_value: string.split(#{$quotient}, '.');

      // Default suffix (exmaple: mt-25 or mt-10.5
      $get_suffix: '-';

      $step_map: ();

      @if (list.length($get_value) > 1) {
        $get_suffix: $get_suffix +
          list.nth($get_value, 1) +
          '\\.'+
          list.nth($get_value, -1);
        $step_map: map.set(
          $step_map,
          $i,
          (
            'selector': $get_suffix,
            'prefix': if($i < 0, '-', ''),
            'value': #{$i} + $unit,
          )
        );
      } @else {
        $get_suffix: $get_suffix + list.nth($get_value, 1);
        $step_map: map.set(
          $step_map,
          $i,
          (
            'selector': $get_suffix,
            'prefix': if($i < 0, '-', ''),
            'value': #{$i} + $unit,
          )
        );
      }
      $spacing-range: map.merge($spacing-range, $step_map) !global;
    }
  }
}
@include generate_spacing_range();

@mixin generate_width_range($max_limit: 12) {
  $index: 0;
  @for $i from 2 through $max_limit {
    @for $j from 1 to $i {
      $step_map: ();
      $quotient: generate-width($j, $i);
      $step_map: map.set(
        $step_map,
        $index,
        (
          'selector': '-' + #{$j} + '\\/'+ #{$i},
          'value': $quotient,
        )
      );
      $width-range: map.merge($width-range, $step_map) !global;
      $index: $index + 1;
    }
    @if $i == $max_limit {
      $width-range: map.merge(
        $width-range,
        $index,
        (
          'selector': '-full',
          'value': '100%',
        )
      ) !global;
    }
  }
}
@include generate_width_range();

@mixin generate_container_up($get_key) {
  @media screen and (min-width: map.get($grid-breakpoints, $get_key)) {
    @content;
  }
}

@mixin generate_utilities($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @each $property, $map in $utilities {
    @each $util-key, $util-val in map.get($map, values) {
      @if (map.get($map, isActive) == true) {
        #{$responsive_key}#{$util-key} {
          #{map.get($map, property)}: $util-val;
        }
        @if ($hover_key != false) {
          #{$responsive_key}#{$hover_key}#{$util-key} {
            &:hover {
              #{map.get($map, property)}: $util-val;
            }
          }
        }
      }
    }
  }
  @for $i from 0 through $number-of-col {
    #{$responsive_key}z-#{$i} {
      z-index: $i;
    }
    @if ($hover_key != false) {
      #{$responsive_key}#{$hover_key}z-#{$i} {
        &:hover {
          z-index: $i;
        }
      }
    }
    #{$responsive_key}order-#{$i} {
      order: $i;
    }
    @if ($hover_key != false) {
      #{$responsive_key}#{$hover_key}order-#{$i} {
        &:hover {
          order: $i;
        }
      }
    }
  }
}

@mixin generate_colors($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @each $key, $property in $color-parameters {
    @each $color_code, $color_value in $color_map {
      #{$responsive_key}#{$key}-#{$color_code} {
        #{$property}: var(--color-#{$color_code});
      }
      @if $hover_key != '' {
        #{$responsive_key}#{$hover_key}#{$key}-#{$color_code} {
          &:hover {
            #{$property}: var(--color-#{$color_code});
          }
        }
      }
    }
  }
}

@mixin generate_margin($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  //.mt-10 or .-mb-10\.5
  $class_prefix: 'm';
  $class_property: 'margin';
  @each $key, $space_map in $spacing-range {
    $selector: map.get($space_map, 'selector');
    $prefix: map.get($space_map, 'prefix');
    $value: map.get($space_map, 'value');

    // To generate -> .m-20{margin: 80px}
    #{$responsive_key + $prefix + $class_prefix + $selector} {
      #{$class_property}: #{$value};
    }

    @if $hover_key != '' {
      #{$responsive_key
        + $hover_key
        + $prefix
        + $class_prefix
        + $selector} {
        &:hover {
          #{$class_property}: #{$value};
        }
      }
    }

    // Generate classes with directions
    @each $direction_key, $direction_val in $space-directions {
      #{$responsive_key
        + $prefix
        + $class_prefix
        + $direction_key
        + $selector} {
        @if (meta.type-of($direction_val) == list) {
          @each $direction in $direction_val {
            #{$class_property + '-' + $direction}: #{$value};
          }
        } @else {
          #{$class_property + '-' + $direction_val}: #{$value};
        }
      }

      @if $hover_key != '' {
        #{$responsive_key
          + $hover_key
          + $prefix
          + $class_prefix
          + $direction_key
          + $selector} {
          &:hover {
            @if (meta.type-of($direction_val) == list) {
              @each $direction in $direction_val {
                #{$class_property + '-' + $direction}: #{$value};
              }
            } @else {
              #{$class_property + '-' + $direction_val}: #{$value};
            }
          }
        }
      }

      // Generate margin auto values
      @if ($key == 0) {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + $direction_key
          + '-auto'} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$class_property + '-' + $direction}: auto;
            }
          } @else {
            #{$class_property + '-' + $direction_val}: auto;
          }
        }

        @if $hover_key != '' {
          #{$responsive_key
            + $hover_key
            + $prefix
            + $class_prefix
            + $direction_key
            + '-auto'} {
            &:hover {
              @if (meta.type-of($direction_val) == list) {
                @each $direction in $direction_val {
                  #{$class_property + '-' + $direction}: auto;
                }
              } @else {
                #{$class_property + '-' + $direction_val}: auto;
              }
            }
          }
        }
      }
    }
  }
}

@mixin generate_padding($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  $class_prefix: 'p';
  $class_property: 'padding';
  @each $key, $space_map in $spacing-range {
    @if ($key >= 0) {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      // To generate -> .m-20{margin: 80px}
      #{$responsive_key + $prefix + $class_prefix + $selector} {
        #{$class_property}: #{$value};
      }

      @if $hover_key != '' {
        #{$responsive_key
          + $hover_key
          + $prefix
          + $class_prefix
          + $selector} {
          &:hover {
            #{$class_property}: #{$value};
          }
        }
      }

      // Generate classes with directions
      @each $direction_key, $direction_val in $space-directions {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + $direction_key
          + $selector} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$class_property + '-' + $direction}: #{$value};
            }
          } @else {
            #{$class_property + '-' + $direction_val}: #{$value};
          }
        }

        @if $hover_key != '' {
          #{$responsive_key
            + $hover_key
            + $prefix
            + $class_prefix
            + $direction_key
            + $selector} {
            &:hover {
              @if (meta.type-of($direction_val) == list) {
                @each $direction in $direction_val {
                  #{$class_property + '-' + $direction}: #{$value};
                }
              } @else {
                #{$class_property + '-' + $direction_val}: #{$value};
              }
            }
          }
        }
      }
    }
  }
}

@mixin generate_gap($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  $class_prefix: 'gap';
  @each $key, $space_map in $spacing-range {
    @if ($key >= 0) {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      // To generate -> .m-20{margin: 80px}
      #{$responsive_key + $prefix + $class_prefix + $selector} {
        gap: #{$value};
      }

      @if $hover_key != '' {
        #{$responsive_key
          + $hover_key
          + $prefix
          + $class_prefix
          + $selector} {
          &:hover {
            gap: #{$value};
          }
        }
      }


      // Generate classes with directions
      @each $direction_key, $direction_val in $gap-directions {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + '-'
          + $direction_key
          + $selector} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$direction_val}: #{$value};
            }
          } @else {
            #{$direction_val}: #{$value};
          }
        }

        @if $hover_key != '' {
          #{$responsive_key
            + $hover_key
            + $prefix
            + $class_prefix
            + '-'
            + $direction_key
            + $selector} {
            &:hover {
              @if (meta.type-of($direction_val) == list) {
                @each $direction in $direction_val {
                  #{$direction_val}: #{$value};
                }
              } @else {
                #{$direction_val}: #{$value};
              }
            }
          }
        }
      }
    }
  }
}

@mixin generate_position($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @each $position_key, $position-val in $position-directions {
    @each $key, $space_map in $spacing-range {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      #{$responsive_key + $prefix + $position_key + $selector} {
        #{$position_val}: #{$value};
      }

      @if $hover_key != '' {
        #{$responsive_key
          + $hover_key
          + $prefix
          + $position_key
          + $selector} {
          &:hover {
            #{$position_val}: #{$value};
          }
        }
      }


    }
    @each $index, $width_map in $width-range {
      $css_value: map.get($width_map, 'value');
      $selector: map.get($width_map, 'selector');

      #{$responsive_key + $position_key + $selector} {
        #{$position_val}: #{$css_value};
      }

      @if $hover_key != '' {
        #{$responsive_key + $hover_key + $position_key + $selector} {
          &:hover {
            #{$position_val}: #{$css_value};
          }
        }
      }
    }
  }
}

@mixin generate_width_height(
  $args,
  $upper_limit: $spacer_limit,
  $spacing: $spacer
) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @each $elem in ('', 'min-', 'max-') {
    @each $key, $value in ('w': 'width', 'h': 'height') {
      $key: $elem + $key;
      $value: $elem + $value;
      @for $i from 0 through ($upper_limit * $spacing) {
        $unit: math.unit($spacer);
        $i: strip-unit($i);
        $spacing: strip-unit($spacing);
        @if ($i % $spacing == 0) {
          #{$responsive_key
            + $key
            + '-'
            + #{math.div($i, $spacing)}} {
            #{$value}: #{$i}#{$unit};
          }
          @if $hover_key != '' {
            #{$responsive_key
              + $hover_key
              + $key
              + '-'
              + #{math.div($i, $spacing)}} {
              &:hover {
                #{$value}: #{$i}#{$unit};
              }
            }
          }
        }
      }

      @each $index, $width_map in $width-range {
        $css_value: map.get($width_map, 'value');
        $selector: map.get($width_map, 'selector');
        #{$responsive_key + $key + $selector} {
          #{$value}: #{$css_value};
        }

        @if $hover_key != '' {
          #{$responsive_key + $hover_key  + $key + $selector} {
            &:hover {
              #{$value}: #{$css_value};
            }
          }
        }
      }

      #{$responsive_key + $key + '-auto'} {
        #{$value}: auto;
      }

      #{$responsive_key + $key + '-min'} {
        #{$value}: min-content;
      }
      #{$responsive_key + $key + '-max'} {
        #{$value}: max-content;
      }
      #{$responsive_key + $key + '-fit'} {
        #{$value}: fit-content;
      }

      #{$responsive_key + $key + '-screen'} {
        #{$value}: #{if($key == 'w', '100vw', '100vh')};
      }

      @if ($key == 'h'){
        @each $elem in ('', 'min-', 'max-'){
          @each $unit, $unit_value in $dynamic-viewports{
            #{$responsive_key + $elem + $key + '-' + $unit} {
              #{$elem + $value}: $unit_value;
            }
          }
        }
      }

      @if $hover_key != '' {
        #{$responsive_key + $hover_key + $key + '-auto'} {
          &:hover {
            #{$value}: auto;
          }
        }

        #{$responsive_key + $hover_key + $key + '-min'} {
          &:hover {
            #{$value}: min-content;
          }
        }
        #{$responsive_key + $hover_key + $key + '-max'} {
          &:hover {
            #{$value}: max-content;
          }
        }
        #{$responsive_key + $hover_key + $key + '-fit'} {
          &:hover {
            #{$value}: fit-content;
          }
        }

        #{$responsive_key + $hover_key + $key + '-screen'} {
          &:hover {
            #{$value}: #{if($key == 'w', '100vw', '100vh')};
          }
        }
      }
    }
  }
}


@mixin generate_width_height_sizing(
  $args,
  $upper_limit: $spacer_limit,
  $spacing: $spacer
) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @each $elem in ('', 'min-', 'max-') {
      $key: $elem + 'size';
      @for $i from 0 through ($upper_limit * $spacing) {
        $unit: math.unit($spacer);
        $i: strip-unit($i);
        $spacing: strip-unit($spacing);
        @if ($i % $spacing == 0) {
          #{$responsive_key
            + $key
            + '-'
            + #{math.div($i, $spacing)}} {
            width: #{$i}#{$unit};
            height: #{$i}#{$unit};
          }

          @if $hover_key != '' {
            #{$responsive_key
              + $hover_key
              + $key
              + '-'
              + #{math.div($i, $spacing)}} {
              &:hover {
                width: #{$i}#{$unit};
                height: #{$i}#{$unit};
              }
            }

          }
        }
      }

      @each $index, $width_map in $width-range {
        $css_value: map.get($width_map, 'value');
        $selector: map.get($width_map, 'selector');
        #{$responsive_key + $key + $selector} {
          width: #{$css_value};
          height: #{$css_value};
        }

        @if $hover_key != '' {
          #{$responsive_key + $hover_key  + $key + $selector} {
            &:hover {
              width: #{$css_value};
              height: #{$css_value};
            }
          }
        }
      }

      #{$responsive_key + $key + '-auto'} {
        width: auto;
        height: auto;
      }

      #{$responsive_key + $key + '-min'} {
        width: min-content;
        height: min-content;
      }
      #{$responsive_key + $key + '-max'} {
        width: max-content;
        height: max-content;
      }
      #{$responsive_key + $key + '-fit'} {
        width: fit-content;
        height: fit-content;
      }

      #{$responsive_key + $key + '-screen'} {
        width: 100vw;
        height: 100vh;
      }

      @if $hover_key != '' {
        #{$responsive_key + $hover_key + $key + '-auto'} {
          &:hover {
            width: auto;
            height: auto;
          }
        }

        #{$responsive_key + $hover_key + $key + '-min'} {
          &:hover {
            width: min-content;
            height: min-content;
          }
        }
        #{$responsive_key + $hover_key + $key + '-max'} {
          &:hover {
            width: max-content;
            height: max-content;
          }
        }
        #{$responsive_key + $hover_key + $key + '-fit'} {
          &:hover {
            width: fit-content;
            height: fit-content;
          }
        }

        #{$responsive_key + $hover_key + $key + '-screen'} {
          &:hover {
            width: 100vw;
            height: 100vh;
          }
        }
      }
  }
}

@mixin generate_border_width($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  $class_prefix: 'border';
  $class_property: 'border';
  @each $key, $space_map in $spacing-range {
    @if ($key >= 0 and $key <= 10) {
      $selector: map.get($space_map, 'selector');
      $prefix: map.get($space_map, 'prefix');
      $value: map.get($space_map, 'value');

      // To generate -> .m-20{margin: 80px}
      #{$responsive_key + $prefix + $class_prefix + '-' + #{$key}} {
        #{$class_property}-width: #{$value};
      }

      @if $hover_key != '' {
        #{$responsive_key
          + $hover_key
          + $prefix
          + $class_prefix
          + '-'
          + #{$key}} {
          &:hover {
            #{$class_property}-width: #{$value};
          }
        }
      }

      // Generate classes with directions
      @each $direction_key, $direction_val in $space-directions {
        #{$responsive_key
          + $prefix
          + $class_prefix
          + '-'
          + $direction_key
          + '-'
          + #{$key}} {
          @if (meta.type-of($direction_val) == list) {
            @each $direction in $direction_val {
              #{$class_property + '-' + $direction}-width: #{$value};
            }
          } @else {
            #{$class_property + '-' + $direction_val}-width: #{$value};
          }
        }

        @if $hover_key != '' {
          #{$responsive_key
            + $hover_key
            + $prefix
            + $class_prefix
            + '-'
            + $direction_key
            + '-'
            + #{$key}} {
            &:hover {
              @if (meta.type-of($direction_val) == list) {
                @each $direction in $direction_val {
                  #{$class_property + '-' + $direction}-width: #{$value};
                }
              } @else {
                #{$class_property + '-' + $direction_val}-width: #{$value};
              }
            }
          }
        }
      }
      @if ($key == 0) {
        #{$responsive_key + $prefix + $class_prefix} {
          #{$class_property}-width: 1px;
        }

        @if $hover_key != '' {
          #{$responsive_key
            + $hover_key
            + $prefix
            + $class_prefix} {
            &:hover {
              #{$class_property}-width: 1px;
            }
          }
        }

        @each $direction_key, $direction_val in $space-directions {
          #{$responsive_key
            + $prefix
            + $class_prefix
            + '-'
            + $direction_key} {
            @if (meta.type-of($direction_val) == list) {
              @each $direction in $direction_val {
                #{$class_property + '-' + $direction}-width: 1px;
              }
            } @else {
              #{$class_property + '-' + $direction_val}-width: 1px;
            }
          }

          @if $hover_key != '' {
            #{$responsive_key
              + $hover_key
              + $prefix
              + $class_prefix
              + '-'
              + $direction_key} {
              &:hover {
                @if (meta.type-of($direction_val) == list) {
                  @each $direction in $direction_val {
                    #{$class_property + '-' + $direction}-width: 1px;
                  }
                } @else {
                  #{$class_property + '-' + $direction_val}-width: 1px;
                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin generate_cols($responsive_key) {
  @for $i from 0 through $number-of-col {
    @if ($i != 0) {
      .col-#{$responsive_key}#{$i} {
        flex: 0 0 auto;
        width: generate-width($i, $number-of-col);
      }
    }
    @if $i != $number-of-col {
      .offset-#{$responsive_key}#{$i} {
        #{if($has-rtl, 'margin-inline-start', 'margin-left')}: generate-width(
          $i,
          $number-of-col
        );
      }
    }
  }
}

@mixin generate_opacity($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @for $i from 0 through 100 {
    @if $i % 5 == 0 {
      #{$responsive_key}opacity-#{$i} {
        opacity: math.div($i, 100);
      }

      @if $hover_key != '' {
        #{$responsive_key}#{$hover_key}opacity-#{$i} {
          &:hover {
            opacity: math.div($i, 100);
          }
        }
      }
    }
  }
}

@mixin generate_transition_duration($args) {
  $responsive_key: list.nth($args, 1);
  $hover_key: list.nth($args, 2);
  @for $i from 0 through 100 {
    @if $i % 5 == 0 {
      #{$responsive_key}transition-#{$i*10} {
        transition-duration: #{$i * 10}ms;
      }
    }
  }
}

$mixin_list: (
  'generate_utilities',
  'generate_opacity',
  'generate_margin',
  'generate_padding',
  'generate_position',
  'generate_width_height',
  'generate_width_height_sizing',
  'generate_gap',
  'generate_transition_duration',
  'generate_border_width',
  'generate_colors'
);

@mixin generate_mixins($responsive_key: false, $hover_key: true) {
  @each $element in $mixin_list {
    @include meta.apply(
      meta.get-mixin($element),
      (
        if($responsive_key, #{'.' + $responsive_key + '\\:'}, '.'),
        if($hover_key, 'hover\\:', '')
      )
    );
  }
}

@mixin deneme($args) {
  @for $i from 1 through 4 {
    @if ($i > list.length($args)) {
      @debug 'hata';
    } @else {
      @debug list.nth($args, $i);
    }
  }
}