@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use 'sass:meta';

@import 'normalizer';
@import 'variables';
@import 'initials';
@import 'functions';
@import 'mixins';

@include generate_utilities();
@include generate_cols();
@include generate_spacing();
@include generate_font_size();
@include generate_opacity();

@if $is-mobile-first == true {
  @each $key, $val in $grid-breakpoints {
    @media screen and (min-width: #{$val}) {
      
      @include generate_cols($key);
      @include generate_utilities($key);
      @include generate_spacing($key);
      @include generate_font_size($key);
      @include generate_opacity($key);
    }
  }
} @else {
  @each $key, $val in $grid-breakpoints {
    @if $val != 0 {
      @media screen and (min-width: #{$val}) {
        @include generate_cols($key);
      }
    }
  }
  $reverse-grid-breakpoints: mapReverse($grid-breakpoints);
  @each $key, $val in $reverse-grid-breakpoints {
    $current-index: list.index(
      $reverse-grid-breakpoints,
      ($key $val)
    );
    @if $current-index != 1 {
      $previous-val: list.nth(
        list.nth($reverse-grid-breakpoints, $current-index - 1),
        2
      );
      $cur-key: list.nth($key, 1);
      @media screen and (max-width: #{$previous-val - 1}) {
        @include generate_utilities($cur-key);
        @include generate_spacing($cur-key);
        @include generate_font_size($cur-key);
        @include generate_opacity($cur-key);
      }
    }
  }
}

$default_colors: (
  'white': #fff,
  'transparent': transparent,
  'black': #000,
);

$color_map: map.merge($color_map, $default_colors);
// Colors start
@each $color_code, $color_value in $color_map {
  .text-#{$color_code} {
    color: var(--color-#{$color_code});
  }
  .bg-#{$color_code} {
    background-color: var(--color-#{$color_code});
  }
  .fill-#{$color_code} {
    fill: var(--color-#{$color_code});
  }
}

// Container Generator
@each $key, $val in $container-max-widths {
  .container-#{$key} {
    @extend .container-fluid;
  }
  @include generate_container_up($key) {
    %get-container-#{$key} {
      max-width: $val;
    }
    $extend-container: true;
    @each $break-key, $break-val in $grid-breakpoints {
      @if ($extend-container) {
        .container#{breakpoint-infix($break-key, $grid-breakpoints)} {
          @extend %get-container-#{$key};
        }
        @if ($key == $break-key) {
          $extend-container: false;
        }
      }
    }
  }
}
